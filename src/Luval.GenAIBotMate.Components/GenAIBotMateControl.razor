<style>

    .chat-card {
    border: 1px solid var(--accent-fill-rest);
    }

    .chat-input {
    width: 100%;
    border: none;
    background: none;
    color: var(--neutral-foreground-rest);
    outline: none;
    }

    /* Input area fixed at the bottom of the viewport, matching the width of the content */
    .chat-box {
    position: fixed; /* Fixes the textarea at the bottom of the screen */
    bottom: 0; /* Positions it at the bottom of the viewport */
    width: calc(100% - 300px); /* Matches the remaining width of the content area */
    box-sizing: border-box; /* Ensures padding and border are included in width/height */
    padding-bottom: 50px;
    }

    @@media(max-width: 768px) {
    .chat-box {
    width: calc(100% - 50px); /* Adjusts width for smaller screens */
    }
    }

    /* Scroll-to-bottom button */
    .scroll-button {
    position: fixed; /* Fixes the button relative to the viewport */
    left: calc(50% + 100px); /* Centers the button horizontally within the content area */
    transform: translateX(-50%); /* Adjusts for exact centering */
    background-color: #007bff; /* Button background color */
    color: white; /* Button text color */
    border: none; /* Removes the default border */
    border-radius: 50%; /* Makes the button circular */
    width: 40px; /* Fixed width for the button */
    height: 40px; /* Fixed height for the button */
    display: none; /* Initially hides the button */
    justify-content: center; /* Centers the content inside the button */
    align-items: center; /* Centers the content inside the button */
    cursor: pointer; /* Changes the cursor to a pointer on hover */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Adds a subtle shadow */
    }

    .scroll-button.show {
    display: flex; /* Shows the button when necessary */
    }

</style>

<div>
    <FluentLayout>
        <FluentHeader>
            <FluentButton IconStart="(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.SettingsChat())"></FluentButton>
            <FluentSpacer />
            @ChatTitle
            <FluentSpacer />
            <FluentAnchor Href="/swagger" Target="_blank">API</FluentAnchor>
        </FluentHeader>
        <div id="content-list">
            @if (IsLoading)
            {
                @* <FluentOverlay Opacity="0.4"
                               BackgroundColor="var(--neutral-layer-4)"
                               FullScreen="true"
                               PreventScroll=true>
                    <FluentProgressRing />
                </FluentOverlay> *@
            }
            else
            {
                @if (this.Messages != null && this.Messages.Any())
                {
                    @foreach (var msg in this.Messages)
                    {
                        @if (!IsStreaming){
                            <ChatMessageContent @key="msg.Id" UserMessage="@msg.UserMessage" AgentResponse="@msg.AgentResponse" />
                        }
                        else
                        {
                            <ChatMessageContent UserMessage="@msg.UserMessage" AgentResponse="@msg.AgentResponse" />
                        }
                    }
                }
                else
                {
                    <div style="display: flex;justify-content: center;align-items: center;height: 80vh;width:95%">
                        <h1>@InitialMessage</h1>
                    </div>
                }
            }
            <div id="focus-item" style="height:125px"></div>
        </div>
        <div class="chat-box">
            <FluentCard Class="chat-card">
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentStack Id="chat-input" Orientation="Orientation.Horizontal">
                        <textarea placeholder="Ask me anything..." class="chat-input" @bind="userMessage"></textarea>
                        <FluentButton Appearance="Appearance.Accent"
                                      IconStart="(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Send())"
                                      Style="margin-top:6px;"
                                      OnClick="OnSubmitClickedAsync"
                                      Disabled="@IsLoading" />
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Attach())"
                                      Title="Attach"/>
                        <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Settings())"
                                      Title="Settings" />
                        <FluentSpacer />
                    </FluentStack>
                </FluentStack>
            </FluentCard>
        </div>
    </FluentLayout>
</div>

<script>
    window.scrollToBottom = function() {
        var el = document.getElementById("focus-item");
        if (el) {
            const pos = el.getBoundingClientRect().top + window.scrollY;
            const target = pos - 150; // Adjust target position by offset
            console.log("called the scroll method with pos: " + pos + " and target: " + target) ;
            el.scrollIntoView({ behavior: 'smooth',top: target });
        }
    }

    document.addEventListener("DOMContentLoaded", function() {
      // Select the chat content list element and the textarea
      const contentList = document.getElementById("content-list");
      const textArea = document.querySelector(".chat-box");

      // Create the scroll-to-bottom button
      const scrollButton = document.createElement("button");
      scrollButton.classList.add("scroll-button");
      scrollButton.innerHTML = "&#8595;"; // Down arrow icon

      // Add the button to the body
      document.body.appendChild(scrollButton);

      // Function to update the position of the scroll button dynamically
      function updateScrollButtonPosition() {
        const textAreaHeight = textArea.offsetHeight; // Get the current height of the textarea
        scrollButton.style.bottom = `${textAreaHeight + 10}px`; // Set the bottom property dynamically
      }

      // Update the button position initially
      updateScrollButtonPosition();

      // Add a resize observer to adjust the position when the textarea size changes
      new ResizeObserver(updateScrollButtonPosition).observe(textArea);

      // Add a scroll event listener to the content list
      contentList.addEventListener("scroll", () => {
        // Show the button if the user scrolls up (content is not fully scrolled to the bottom)
        if (contentList.scrollTop < contentList.scrollHeight - contentList.clientHeight - 50) {
          scrollButton.classList.add("show");
        } else {
          // Hide the button when fully scrolled to the bottom
          scrollButton.classList.remove("show");
        }
      });

      // Add a click event listener to the scroll-to-bottom button
      scrollButton.addEventListener("click", () => {
        window.scrollToBottom();
      });
    });
</script>