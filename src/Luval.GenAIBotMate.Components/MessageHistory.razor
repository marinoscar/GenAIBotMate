@using Luval.GenAIBotMate.Components.Infrastructure.Data
@using Luval.GenAIBotMate.Core.Entities

@implements IDialogContentComponent<HistoryDto>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        @foreach (var item in Content.Sessions.OrderByDescending(i => i.UtcUpdatedOn).Take(20))
        {
            <div style=" display: flex;width: 100%;">
                <div style="flex-grow: 1;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
                    <FluentButton 
                                Appearance="Appearance.Outline" 
                                Style="width:100%;"
                                  @onclick="@(() => HandleNavigate(item))">
                        @item.Title</FluentButton>
                </div>
                <div style="flex-grow: 0;flex-basis: auto;">
                    <FluentButton @key="@string.Format("delbtn_{0}", item.Id)"  Appearance="Appearance.Lightweight" @onclick="@(() => HandleDelete(item))"  >
                        <FluentIcon Color="Color.Error" Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size16.Delete())" />
                    </FluentButton>
                </div>
            </div>
        }
    </FluentStack>
</FluentDialogBody>

@code {
    [Parameter]
    public HistoryDto Content { get; set; } = default!;

    private string TruncateString(string input)
    {
        return TruncateString(input, 30);
    }

    private string TruncateString(string input, int charCount)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty; // Handle null or empty input gracefully.
        return input.Length > charCount ? input.Substring(0, charCount) : input;
    }

    private async Task HandleNavigate(ChatSession session){
        await Content.NavigateFunction?.Invoke(session);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleDelete(ChatSession session)
    {
        Debug.WriteLine("Delete session: " + session.Id);
        await Content.DeleteFunction?.Invoke(session);
        await InvokeAsync(StateHasChanged);
    }
}
